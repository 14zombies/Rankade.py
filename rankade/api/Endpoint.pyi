"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from enum import Enum
from typing import TYPE_CHECKING, MutableMapping, Optional, Union

from enum_tools.documentation import document_enum

from .Api import HEADERS, JSON, PARAMS

if TYPE_CHECKING:
    ...
class Endpoint_Method(Enum):
    """HTTP Request methods [RFC2616 Section 5.1.1](https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)"""
    GET = ...
    POST = ...
    PUT = ...
    PATCH = ...
    DELETE = ...
    HEAD = ...
    OPTIONS = ...
    TRACE = ...
    CONNECT = ...


@dataclass
class Endpoint_Mixin:
    """Stores the basic information needed for each endpoint."""
    auth: bool
    paginated: bool
    method: Endpoint_Method
    base_path: str
    ...


@document_enum
class Endpoint(Endpoint_Mixin, Enum):
    """
    Enum with information needed for each request.
    auth, paginated, method, base_path
    """
    AUTH = ...
    GAME = ...
    GAMES = ...
    GAMES_POPULAR = ...
    GAMES_SEARCH = ...
    MATCH = ...
    MATCH_EXISTS = ...
    MATCH_STATUS = ...
    MATCHES = ...
    PLAYER = ...
    PLAYERS = ...
    QUOTA = ...
    RANKINGS = ...
    STATUS = ...
    SUBSET = ...
    _TEST = ...


@dataclass
class Endpoint_Request:
    """Full information needed for Api.request to make a request."""
    endpoint: Endpoint
    params: PARAMS = ...
    headers: HEADERS = ...
    json: JSON = ...
    page: Optional[int] = ...
    match: Optional[int] = ...
    subset: Optional[str] = ...
    def __post_init__(self) -> None:
        ...

    @property
    def path(self) -> str:
        """Builds the URL path to use, from the base path included in the Endpoint with {page}, {match}, & {subset} replaced with the appropriate value"""
        ...

    @property
    def method(self) -> str:
        """Returns the required HTTP method to be used for the endpoint."""
        ...

    @property
    def requires_auth(self) -> bool:
        """Does the endpoint require authorisation before making the request."""
        ...

    @property
    def is_paginated(self) -> bool:
        """Will the request return a paginated response."""
        ...

    def add_parameter(self, name: str, value: str) -> MutableMapping[str, Union[str, int]]:
        """Convenience method to add a custom parameter."""
        ...

    def add_header(self, name: str, value: str) -> MutableMapping[str, str]:
        """Convenience method to add a custom header."""
        ...

    def set_json(self, json: JSON) -> JSON:
        """Convenience method to set the JSON body of the request."""
        ...



